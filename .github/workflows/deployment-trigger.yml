name: 'PIP'
on:
  issues:
    types: [opened, reopened, edited]
env:
  TRUSTED_SENDERS: '["gronke-bot"]'
  TRUSTED_REPOS: '["gronke/py-freebsd_sysctl"]'
  TRUSTED_TEST_REPOS: '["bsdci/py-freebsd_sysctl"]'
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - name: "Check Trusted Sender"
      if: contains(fromJson(env.TRUSTED_SENDERS), github.event.sender.login) == false
      env:
        ACTION_SENDER: ${{ github.event.sender.login }}
      run: |
        echo "$ACTION_SENDER is untrusted."
        exit 1
    - run: |
        cat <<___EOF
        ${{ toJson(github.event.issue.body) }}
        ___EOF
    - run: |
        cat <<___EOF
        ${{ toJson(github.event.issue) }}
        ___EOF

    - name: "Read Issue Body"
      id: issue_body
      env:
        GITHUB_ISSUE_BODY: ${{ github.event.issue.body }}
      run: |
        python3 <<___EOF
        import re
        import os
        body = os.environ["GITHUB_ISSUE_BODY"].replace("\r\n", "\n").replace("\r", "\n")
        body = f"\n{body}\n"
        REPOSITORY = re.match(r'(?:.*\n)?Repository: ([A-Za-z0-9\.\-_/]+)\n.*', body, re.DOTALL)[1]
        MODULE = re.match(r'(?:.*\n)?Module: \[([A-Za-z0-9\.\-_/]+)\]\((?:.*?)\)\n.*', body, re.DOTALL)[1]
        VERSION = re.match(r'(?:.*\n)?Version: ([0-9]+\.[0-9]+\.[0-9]+)\n.*', body, re.DOTALL)[1]
        COMMIT = re.match(r'(?:.*\n)?Commit: ([A-Fa-f0-9]{40})\n.*', body, re.DOTALL)[1]
        PACKAGES = ",".join(re.match(f"^(?:.*\n)?(Packages:\ ?(?:\n-\ (?:[A-Za-z0-9_\-\.]+))+)(?:\n[^-].*?)?$", body, re.DOTALL)[1].split("\n- ")[1:])
        print(f"::set-output name=REPOSITORY::{REPOSITORY}")
        print(f"::set-output name=MODULE::{MODULE}")
        print(f"::set-output name=VERSION::{VERSION}")
        print(f"::set-output name=COMMIT::{COMMIT}")
        print(f"::set-output name=Packages::{PACKAGES}")
        ___EOF

    - uses: actions/setup-python@v1
      with:
        python-version: "3.X"

    - name: "Install Tools"
      run: |
        python3 -m pip install -U pip
        python3 -m pip install -U twine changelogmd requests

    - uses: actions/checkout@v2
      with:
        path: "tools/"

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        repository: ${{ steps.issue_body.outputs.REPOSITORY }}
        path: "source/"

    - name: "Untrusted Repository"
      if: (contains(fromJson(env.TRUSTED_REPOS), steps.issue_body.outputs.REPOSITORY) == false) && (contains(fromJson(env.TRUSTED_TEST_REPOS), steps.issue_body.outputs.REPOSITORY) == false)
      run: |
        echo "Untrusted Repository."
        exit 1

    - name: "Verify Repository"
      env:
        ISSUE_BODY_VERSION: ${{ steps.issue_body.outputs.VERSION }}
        ISSUE_BODY_COMMIT: ${{ steps.issue_body.outputs.COMMIT }}
      run: |
        CURRENT_COMMIT="$(git --git-dir ./source/.git rev-parse --verify HEAD)"
        if [ "$CURRENT_COMMIT" != "$ISSUE_BODY_COMMIT" ]; then
          echo "Commit mismatch: (requested $ISSUE_BODY_COMMIT, but found $CURRENT_COMMIT"
          exit 1
        fi
        if [ "$ISSUE_BODY_VERSION" == "UNRELEASED" ]; then
          echo "Refusing to deploy UNRELEASED changes."
          exit 1
        fi
        if [ "(cat ./source/CHANGELOG.md | grep "^## " | cut -d " " -f 2" == "[$ISSUE_BODY_VERSION]" ]; then
          echo "Incorrect version in CHANGELOG.md"
          exit 1
        fi

    - name: Download GitHub Release Asset
      id: download_release_asset
      env:
        RELEASE_API_URL: "https://api.github.com/repos/${{ steps.issue_body.outputs.REPOSITORY }}/releases"
        ISSUE_REPOSITORY: ${{ steps.issue_body.outputs.REPOSITORY }}
        ISSUE_MODULE: ${{ steps.issue_body.outputs.MODULE }}
        ISSUE_VERSION: ${{ steps.issue_body.outputs.VERSION }}
        ISSUE_PACKAGES: ${{ steps.issue_body.outputs.PACKAGES }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: python3 tools/download-release-asset.py

    - name: "Configure PyPI"
      if: contains(fromJson(env.TRUSTED_REPOS), steps.issue_body.outputs.REPOSITORY)
      env:
        TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"
        TWINE_PROJECT_URL: "https://pypi.org/project/${{ steps.issue_body.outputs.MODULE }}/${{ steps.issue_body.outputs.VERSION }}"
        TWINE_PASSWORD: "${{ secrets.PYPI_API_TOKEN }}"
      run: |
        echo "::set-env name=TWINE_REPOSITORY_URL::$TWINE_REPOSITORY_URL"
        echo "::set-env name=TWINE_PROJECT_URL::$TWINE_PROJECT_URL"
        echo "::set-env name=TWINE_PASSWORD::$TWINE_PASSWORD"

    - name: "Configure PyPI (Testing)"
      if: contains(fromJson(env.TRUSTED_TEST_REPOS), steps.issue_body.outputs.REPOSITORY)
      env:
        TWINE_REPOSITORY_URL: "https://test.pypi.org/legacy/"
        TWINE_PROJECT_URL: "https://test.pypi.org/project/${{ steps.issue_body.outputs.MODULE }}/${{ steps.issue_body.outputs.VERSION }}"
        TWINE_PASSWORD: "${{ secrets.TESTPYPI_API_TOKEN }}"
      run: |
        echo "::set-env name=TWINE_REPOSITORY_URL::$TWINE_REPOSITORY_URL"
        echo "::set-env name=TWINE_PROJECT_URL::$TWINE_PROJECT_URL"
        echo "::set-env name=TWINE_PASSWORD::$TWINE_PASSWORD"

    - name: "Deploy"
      id: deploy
      env:
        TARFILE: ${{ steps.download_release_asset.outputs.TARFILE }}
      run: |
        python3 -m twine upload --non-interactive --disable-progress-bar -u __token__ "$TARFILE"
        echo "::set-output name=URL::$TWINE_PROJECT_URL"

    - uses: actions/github-script@0.9.0
      env:
        URL: ${{ steps.deploy.outputs.URL }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const URL = process.env.URL;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸŽ‰ Release has been published!\n\n${URL}`
          });
          github.issues.update({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: "closed"
          });
